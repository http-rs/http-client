name: CI

on:
  pull_request:
  push:
    branches:
      - staging
      - trying

jobs:
  build_and_test:
    name: Build and test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
        backend: ["h1_client,native-tls", hyper_client, curl_client]

    steps:
    - uses: actions/checkout@master

    - name: check
      run: cargo check --all-targets --workspace --no-default-features --features '${{ matrix.backend }}'

    - name: tests
      run: cargo test --all-targets --workspace --no-default-features --features '${{ matrix.backend }}'

  check_no_features:
    name: Checking without default features
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master

      - name: check
        run: cargo check --no-default-features

  clippy_fmt_docs:
    name: Running clippy & fmt & docs
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master

    - name: Install nightly toolchain
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: nightly
        override: true
        components: clippy, rustfmt

    - name: clippy
      run: cargo clippy --all-targets --workspace --features=docs

    - name: fmt
      run: cargo fmt --all -- --check

    - name: docs
      run: cargo doc --no-deps --features=docs

  check_wasm:
    name: Check wasm targets
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@master

    - name: Install nightly with wasm32-unknown-emscripten
      uses: actions-rs/toolchain@v1
      with:
        toolchain: nightly
        target: wasm32-unknown-emscripten
        override: true

    - name: check
      uses: actions-rs/cargo@v1
      with:
        command: check
        args: --target wasm32-unknown-emscripten --no-default-features --features "native_client,wasm_client"

  check_features:
    name: Check feature combinations
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master

    - name: Install cargo-hack
      run: cargo install cargo-hack

    - name: Check all feature combinations works properly
      # * `--feature-powerset` - run for the feature powerset of the package
      # * `--no-dev-deps` - build without dev-dependencies to avoid https://github.com/rust-lang/cargo/issues/4866
      # * `--skip docs` - skip `docs` feature
      run: cargo hack check --feature-powerset --no-dev-deps --skip docs
